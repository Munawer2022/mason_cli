import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart';
import 'package:http/http.dart' as http;
import '/data/app_excaptions.dart';
import '/data/network/BaseApiServices.dart';
{{#auth}}
import '../../view_model/services/token_view_model.dart';
{{/auth}}

class NetworkApiService extends BaseApiServices {
  @override
  Future getGetApiResponse(String url) async {
    dynamic responseJson;
    try {
      final response =
          await http.get(Uri.parse(url),
          {{#auth}}
          headers: {'Authorization': 'Bearer $token'},
          {{/auth}}
          ).timeout(const Duration(seconds: 10));
      responseJson = returnResponse(response);
   } on TimeoutException {
      throw 'Please check your internet connection and try again.';
    } on SocketException {
      throw FetchDataException('No Internet Connection');
    }

    return responseJson;
  }

  @override
  Future getPostApiResponse(String url, dynamic data,
      {Map<String, String>? headers}) async {
    dynamic responseJson;
    try {
      Response response = await post(
        Uri.parse(url),
        body: data,
        headers: headers,
      ).timeout(const Duration(seconds: 10));

      responseJson = returnResponse(response);
    } on TimeoutException {
      throw 'Please check your internet connection and try again.';
    } on SocketException {
      throw FetchDataException('No Internet Connection');
    }

    return responseJson;
  }

  @override
  Future getpatchApiResponse(String url, dynamic data,
      {Map<String, String>? headers}) async {
    dynamic responseJson;
    try {
      Response response = await patch(
        Uri.parse(url),
        body: data,
        headers: headers
        {{#auth}} 
        ?? {'Authorization': 'Bearer $token'}
        {{/auth}}
        ,
      ).timeout(const Duration(seconds: 10));

      responseJson = returnResponse(response);
    } on TimeoutException {
      throw 'Please check your internet connection and try again.';
    } on SocketException {
      throw FetchDataException('No Internet Connection');
    }

    return responseJson;
  }

  dynamic returnResponse(http.Response response) {
    switch (response.statusCode) {
      case 200:
        dynamic responseJson = jsonDecode(response.body);
        return responseJson;
      case 400:
        // throw BadRequestException(response.body.toString());
        throw response.body;
      case 500:
      case 404:
        // throw UnauthorisedException(response.body.toString());
        throw response.body;
      default:
        throw FetchDataException(
        'Error accured while communicating with server with status code ${response.statusCode}');
    }
  }
}
