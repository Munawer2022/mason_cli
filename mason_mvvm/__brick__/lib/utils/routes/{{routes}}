import 'package:flutter/material.dart';
import '/utils/routes/routes_name.dart';
import '/resource/navigation/transition_type.dart';
import '/resource/navigation/transition_type_checker.dart';
{{#isFlutterBloc}}
import '/view_model/injection/injection_container.dart';
{{/isFlutterBloc}}

{{#auth}}
/*
 ************************ Auth ************************
*/
import '/view/splash/splash_view.dart';
import '/view/auth/login/login_view.dart';
import '/view/auth/sign_up/sign_up_view.dart';
import '/view/auth/forgot_password/forgot_password_view.dart';
{{/auth}}
/*
 ************************ {{class_name}} ************************
*/
import '/view/{{folder_name}}/{{folder_name}}_view.dart';

class Routes extends PageRoute with DefaultPageRoute {
   Route<dynamic> generateRoute(RouteSettings settings) {
    switch (settings.name) {
        {{#auth}}
      case RoutesName.splash:
        return getPageRoute(const SplashView());
      case RoutesName.login:
        return getPageRoute(const LoginView());
      case RoutesName.signUp:
        return getPageRoute(const SignUpView());
      case RoutesName.forgotPassword:
        return getPageRoute(const ForgotPasswordView());
        {{/auth}}
      case RoutesName.{{folder_name}}:
        return getPageRoute({{class_name}}View(
          {{#isFlutterBloc}}
          cubit: getIt()
          {{/isFlutterBloc}}
          ));
      default:
        return getDefaultRoute();
    }
  }
}

class PageRoute with TransitionTypeChecker {
  Route getPageRoute(Widget routeName,
      {TransitionType transitionType = TransitionType.slideFromRight}) {
    final route = transitionTypeChecker(routeName, transitionType);
    return route;
  }
}

mixin DefaultPageRoute {
  Route getDefaultRoute() => MaterialPageRoute(
      builder: (_) => const Scaffold(
            body: Center(
              child: Text('No route defined'),
              
            ),
          ));
}
