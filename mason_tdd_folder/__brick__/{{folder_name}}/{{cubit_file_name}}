{{#isGet}}
import 'package:flutter_bloc/flutter_bloc.dart';
import '{{initial_params_file_name}}';
import '{{navigator_file_name}}';
import '{{state_file_name}}';
import '/domain/repositories/{{folder_name}}/{{folder_name}}_base_api_service.dart';
import '/config/response/api_response.dart';

class {{class_name}}Cubit extends Cubit<{{class_name}}State> {
  final {{class_name}}BaseApiService baseApiServices;
  final {{class_name}}Navigator navigator;
  final {{class_name}}InitialParams initialParams;
{{class_name}}Cubit(
  this.initialParams,
      this.baseApiServices,
      this.navigator)
   : super({{class_name}}State.initial(initialParams:initialParams));

Future<void> {{folder_name_camelCase}}() async {
    emit(state.copyWith(response: ApiResponse.loading()));
    final {{folder_name_camelCase}} = await baseApiServices.{{folder_name_camelCase}}();
    {{folder_name_camelCase}}.fold(
      (l) => emit(state.copyWith(response: ApiResponse.error(l.error))),
      ((r) =>emit(state.copyWith(response: ApiResponse.completed(r)))));
  }
  Future<void> refresh() async => await {{folder_name_camelCase}}();
  
}
{{/isGet}}

  {{#isPost}}
import 'package:flutter_bloc/flutter_bloc.dart';
import '{{initial_params_file_name}}';
import '{{navigator_file_name}}';
import '{{state_file_name}}';
import '/domain/repositories/{{folder_name}}/{{folder_name}}_base_api_service.dart';

class {{class_name}}Cubit extends Cubit<{{class_name}}State> {
  final {{class_name}}BaseApiService baseApiServices;
  final {{class_name}}Navigator navigator;
  final {{class_name}}InitialParams initialParams;
{{class_name}}Cubit(
  this.initialParams,
      this.baseApiServices,
      this.navigator)
   : super({{class_name}}State.initial(initialParams:initialParams));

Future<void> {{folder_name_camelCase}}(
{required Map<String, dynamic> body}
) async {
    emit(state.copyWith(isLoading: true));
    final {{folder_name_camelCase}} = await baseApiServices.{{folder_name_camelCase}}(
  body: body);
    {{folder_name_camelCase}}.fold(
      (l) => emit(state.copyWith(isLoading: false, error: l.error)),
      ((r) =>emit(state.copyWith(success: r, isLoading: false))));
  }
}
  {{/isPost}}

{{#isNoThing}}
import 'package:flutter_bloc/flutter_bloc.dart';
import '{{initial_params_file_name}}';
import '{{navigator_file_name}}';
import '{{state_file_name}}';

class {{class_name}}Cubit extends Cubit<{{class_name}}State> {
  final {{class_name}}Navigator navigator;
  final {{class_name}}InitialParams initialParams;
{{class_name}}Cubit(
  this.initialParams,
      this.navigator)
   : super({{class_name}}State.initial(initialParams:initialParams));

}
{{/isNoThing}}